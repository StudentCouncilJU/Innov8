// /*
// Auto-generated by: https://github.com/pmndrs/gltfjsx
// */

// import * as THREE from "three";
// import React, { useRef } from "react";
// import { useGLTF } from "@react-three/drei";
// import { GLTF } from "three-stdlib";

// type GLTFResult = GLTF & {
//   nodes: {
//     mesh_0: THREE.Mesh;
//   };
//   materials: {};
// };

// export function Model(props: JSX.IntrinsicElements["group"]) {
//   const { nodes, materials } = useGLTF(
//     "/Models/uploads_files_6203010_Futuristic+Combat+Robot+Soldier+(1).glb"
//   ) as GLTFResult;
//   return (
//     <group {...props} dispose={null} scale={2.8} position={[0, 0.2, 0]}>
//       <group>
//         <mesh
//           name="mesh_0"
//           castShadow
//           receiveShadow
//           geometry={nodes.mesh_0.geometry}
//           material={nodes.mesh_0.material}
//         />
//       </group>
//     </group>
//   );
// }

// useGLTF.preload(
//   "/uploads_files_6203010_Futuristic+Combat+Robot+Soldier+(1).glb"
// );

/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three";
import React, { useRef, JSX } from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { useFrame } from "@react-three/fiber";

type GLTFResult = GLTF & {
  nodes: {
    mesh_0: THREE.Mesh;
  };
  materials: Record<string, THREE.Material>;
};

export function Model(props: JSX.IntrinsicElements["group"]) {
  const { nodes } = useGLTF(
    "/Models/uploads_files_6203010_Futuristic+Combat+Robot+Soldier+(1).glb"
  ) as unknown as GLTFResult;

  const group = useRef<THREE.Group>(null!);

  // Floating animation
  useFrame(({ clock }) => {
    const t = clock.getElapsedTime();
    if (group.current) {
      group.current.position.y = 0.2 + Math.sin(t * 2) * 0.1; // up & down float
      group.current.rotation.y = Math.sin(t * 0.5) * 0.2; // gentle sway
    }
  });

  return (
    <group ref={group} {...props} dispose={null} scale={2.8} position={[0, 0.2, 0]} >
      <mesh
        name="mesh_0"
        castShadow
        receiveShadow
        geometry={nodes.mesh_0.geometry}
        material={nodes.mesh_0.material}
        // material={liquidMaterial.current}
      />
    </group>
  );
}

useGLTF.preload(
  "/Models/uploads_files_6203010_Futuristic+Combat+Robot+Soldier+(1).glb"
);